{"ast":null,"code":"var _jsxFileName = \"/Users/asadayuya/Desktop/udemy/twitter_app_lesson/src/components/TweetInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./TweetInput.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { storage, db, auth } from \"../firebase\";\nimport { Avatar, Button, IconButton } from \"@material-ui/core\";\nimport firebase from \"firebase/app\";\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetInput = () => {\n  _s();\n\n  const user = useSelector(selectUser);\n  const [tweetImage, setTweetImage] = useState(null);\n  const [tweetMsg, setTweetMsg] = useState(\"\");\n\n  const onChangeImageHandler = e => {\n    if (e.target.files[0]) {\n      setTweetImage(e.target.files[0]);\n      e.target.value = \"\";\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault(); //リフレッシュを防止\n\n    if (tweetImage) {\n      const S = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N))).map(n => S[n % S.length]).join(\"\");\n      const fileName = randomChar + \"_\" + tweetImage.name;\n      const uploadTweetImg = storage.ref(`images/${fileName}`).put(tweetImage); //ストレージ上に画像データをupload,URLを生成\n\n      uploadTweetImg.on(firebase.storage.TaskEvent.STATE_CHANGED, () => {}, err => {\n        alert(err.message);\n      }, async () => {\n        //ストレージ上の画像のURLを保存\n        await storage.ref(\"images\").child(fileName).getDownloadURL().then(async url => {\n          await db.collection(\"posts\").add({\n            avatar: user.photoUrl,\n            image: url,\n            text: tweetMsg,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            //投稿された時刻\n            username: user.displayName\n          });\n        });\n      });\n    } else {\n      db.collection(\"posts\").add({\n        avatar: user.photoUrl,\n        image: \"\",\n        text: tweetMsg,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        //投稿された時刻\n        username: user.displayName\n      });\n    }\n\n    setTweetImage(null);\n    setTweetMsg(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendTweet,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tweet_form,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          className: styles.tweet_avatar,\n          src: user.photoUrl,\n          onClick: async () => {\n            await auth.signOut();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.tweet_input,\n          placeholder: \"what's happening?\",\n          type: \"text\",\n          autoFocus: true,\n          value: tweetMsg,\n          onChange: e => setTweetMsg(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(AddAPhotoIcon, {\n              className: tweetImage ? styles.tweet_addIconLoaded : styles.tweet_addIcon //もうすでに画像をアップしている場合、アイコンの色が変わる\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: onChangeImageHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !tweetMsg,\n        className: tweetMsg ? styles.tweet_sendBtn : styles.tweet_sendDisableBtn,\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TweetInput, \"PnBTyhR4kEhLiMw7oBtl1Sdd6Ts=\", false, function () {\n  return [useSelector];\n});\n\n_c = TweetInput;\nexport default TweetInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetInput\");","map":{"version":3,"sources":["/Users/asadayuya/Desktop/udemy/twitter_app_lesson/src/components/TweetInput.tsx"],"names":["React","useState","styles","useSelector","selectUser","storage","db","auth","Avatar","Button","IconButton","firebase","AddAPhotoIcon","TweetInput","user","tweetImage","setTweetImage","tweetMsg","setTweetMsg","onChangeImageHandler","e","target","files","value","sendTweet","preventDefault","S","N","randomChar","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","fileName","name","uploadTweetImg","ref","put","on","TaskEvent","STATE_CHANGED","err","alert","message","child","getDownloadURL","then","url","collection","add","avatar","photoUrl","image","text","timestamp","firestore","FieldValue","serverTimestamp","username","displayName","tweet_form","tweet_avatar","signOut","tweet_input","tweet_addIconLoaded","tweet_addIcon","tweet_sendBtn","tweet_sendDisableBtn"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./TweetInput.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { storage, db, auth } from \"../firebase\";\nimport { Avatar, Button, IconButton } from \"@material-ui/core\";\nimport firebase from \"firebase/app\";\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\nimport { isIfStatement } from \"typescript\";\nconst TweetInput = () => {\n  const user = useSelector(selectUser);\n  const [tweetImage, setTweetImage] = useState<File | null>(null);\n  const [tweetMsg, setTweetMsg] = useState(\"\");\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setTweetImage(e.target.files![0]);\n      e.target.value = \"\";\n    }\n  };\n  const sendTweet = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    //リフレッシュを防止\n    if (tweetImage) {\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + tweetImage.name;\n      const uploadTweetImg = storage.ref(`images/${fileName}`).put(tweetImage);\n      //ストレージ上に画像データをupload,URLを生成\n      uploadTweetImg.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        () => {},\n        (err) => {\n          alert(err.message);\n        },\n        async () => {\n          //ストレージ上の画像のURLを保存\n          await storage\n            .ref(\"images\")\n            .child(fileName)\n            .getDownloadURL()\n            .then(async (url) => {\n              await db.collection(\"posts\").add({\n                avatar: user.photoUrl,\n                image: url,\n                text: tweetMsg,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                //投稿された時刻\n                username: user.displayName,\n              });\n            });\n        }\n      );\n    } else {\n      db.collection(\"posts\").add({\n        avatar: user.photoUrl,\n        image: \"\",\n        text: tweetMsg,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        //投稿された時刻\n        username: user.displayName,\n      });\n    }\n    setTweetImage(null);\n    setTweetMsg(\"\");\n  };\n  return (\n    <>\n      <form onSubmit={sendTweet}>\n        <div className={styles.tweet_form}>\n          <Avatar\n            className={styles.tweet_avatar}\n            src={user.photoUrl}\n            onClick={async () => {\n              await auth.signOut();\n            }}\n          />\n          <input\n            className={styles.tweet_input}\n            placeholder=\"what's happening?\"\n            type=\"text\"\n            autoFocus\n            value={tweetMsg}\n            onChange={(e) => setTweetMsg(e.target.value)}\n          />\n          <IconButton>\n            <label>\n              <AddAPhotoIcon\n                className={\n                  tweetImage ? styles.tweet_addIconLoaded : styles.tweet_addIcon\n                }\n                //もうすでに画像をアップしている場合、アイコンの色が変わる\n              />\n              <input type=\"file\" onChange={onChangeImageHandler} />\n            </label>\n          </IconButton>\n        </div>\n        <Button\n          type=\"submit\"\n          disabled={!tweetMsg}\n          className={\n            tweetMsg ? styles.tweet_sendBtn : styles.tweet_sendDisableBtn\n          }\n        >\n          Tweet\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default TweetInput;\n"]},"metadata":{},"sourceType":"module"}